// Code generated by protoc-gen-go. DO NOT EDIT.
// source: epaxos.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Specifies the status of a ballot
type Status int32

const (
	Status_NONE           Status = 0
	Status_PREACCEPTED    Status = 1
	Status_PREACCEPTED_EQ Status = 2
	Status_ACCEPTED       Status = 3
	Status_COMMITTED      Status = 4
	Status_EXECUTED       Status = 5
)

var Status_name = map[int32]string{
	0: "NONE",
	1: "PREACCEPTED",
	2: "PREACCEPTED_EQ",
	3: "ACCEPTED",
	4: "COMMITTED",
	5: "EXECUTED",
}
var Status_value = map[string]int32{
	"NONE":           0,
	"PREACCEPTED":    1,
	"PREACCEPTED_EQ": 2,
	"ACCEPTED":       3,
	"COMMITTED":      4,
	"EXECUTED":       5,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}
func (Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

type PrepareRequest struct {
	LeaderId int32  `protobuf:"varint,1,opt,name=leaderId" json:"leaderId,omitempty"`
	Replica  int32  `protobuf:"varint,2,opt,name=replica" json:"replica,omitempty"`
	Instance int32  `protobuf:"varint,3,opt,name=instance" json:"instance,omitempty"`
	Ballot   uint64 `protobuf:"varint,4,opt,name=ballot" json:"ballot,omitempty"`
}

func (m *PrepareRequest) Reset()                    { *m = PrepareRequest{} }
func (m *PrepareRequest) String() string            { return proto.CompactTextString(m) }
func (*PrepareRequest) ProtoMessage()               {}
func (*PrepareRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *PrepareRequest) GetLeaderId() int32 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

func (m *PrepareRequest) GetReplica() int32 {
	if m != nil {
		return m.Replica
	}
	return 0
}

func (m *PrepareRequest) GetInstance() int32 {
	if m != nil {
		return m.Instance
	}
	return 0
}

func (m *PrepareRequest) GetBallot() uint64 {
	if m != nil {
		return m.Ballot
	}
	return 0
}

type PrepareReply struct {
	AcceptorId int32  `protobuf:"varint,1,opt,name=acceptorId" json:"acceptorId,omitempty"`
	Replica    int32  `protobuf:"varint,2,opt,name=replica" json:"replica,omitempty"`
	Instance   int32  `protobuf:"varint,3,opt,name=instance" json:"instance,omitempty"`
	Ok         bool   `protobuf:"varint,4,opt,name=ok" json:"ok,omitempty"`
	Ballot     uint64 `protobuf:"varint,5,opt,name=ballot" json:"ballot,omitempty"`
	Status     Status `protobuf:"varint,6,opt,name=status,enum=pb.Status" json:"status,omitempty"`
	Name       string `protobuf:"bytes,7,opt,name=name" json:"name,omitempty"`
	Value      []byte `protobuf:"bytes,8,opt,name=value,proto3" json:"value,omitempty"`
	Seq        uint64 `protobuf:"varint,9,opt,name=seq" json:"seq,omitempty"`
	Deps       []byte `protobuf:"bytes,10,opt,name=deps,proto3" json:"deps,omitempty"`
}

func (m *PrepareReply) Reset()                    { *m = PrepareReply{} }
func (m *PrepareReply) String() string            { return proto.CompactTextString(m) }
func (*PrepareReply) ProtoMessage()               {}
func (*PrepareReply) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *PrepareReply) GetAcceptorId() int32 {
	if m != nil {
		return m.AcceptorId
	}
	return 0
}

func (m *PrepareReply) GetReplica() int32 {
	if m != nil {
		return m.Replica
	}
	return 0
}

func (m *PrepareReply) GetInstance() int32 {
	if m != nil {
		return m.Instance
	}
	return 0
}

func (m *PrepareReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *PrepareReply) GetBallot() uint64 {
	if m != nil {
		return m.Ballot
	}
	return 0
}

func (m *PrepareReply) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_NONE
}

func (m *PrepareReply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PrepareReply) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *PrepareReply) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *PrepareReply) GetDeps() []byte {
	if m != nil {
		return m.Deps
	}
	return nil
}

type PreAcceptRequest struct {
	LeaderId int32  `protobuf:"varint,1,opt,name=leaderId" json:"leaderId,omitempty"`
	Replica  int32  `protobuf:"varint,2,opt,name=replica" json:"replica,omitempty"`
	Instance int32  `protobuf:"varint,3,opt,name=instance" json:"instance,omitempty"`
	Ballot   uint64 `protobuf:"varint,4,opt,name=ballot" json:"ballot,omitempty"`
	Name     string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Value    []byte `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	Seq      uint64 `protobuf:"varint,7,opt,name=seq" json:"seq,omitempty"`
	Deps     []byte `protobuf:"bytes,8,opt,name=deps,proto3" json:"deps,omitempty"`
}

func (m *PreAcceptRequest) Reset()                    { *m = PreAcceptRequest{} }
func (m *PreAcceptRequest) String() string            { return proto.CompactTextString(m) }
func (*PreAcceptRequest) ProtoMessage()               {}
func (*PreAcceptRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *PreAcceptRequest) GetLeaderId() int32 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

func (m *PreAcceptRequest) GetReplica() int32 {
	if m != nil {
		return m.Replica
	}
	return 0
}

func (m *PreAcceptRequest) GetInstance() int32 {
	if m != nil {
		return m.Instance
	}
	return 0
}

func (m *PreAcceptRequest) GetBallot() uint64 {
	if m != nil {
		return m.Ballot
	}
	return 0
}

func (m *PreAcceptRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PreAcceptRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *PreAcceptRequest) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *PreAcceptRequest) GetDeps() []byte {
	if m != nil {
		return m.Deps
	}
	return nil
}

type PreAcceptReply struct {
	Replica       int32  `protobuf:"varint,1,opt,name=replica" json:"replica,omitempty"`
	Instance      int32  `protobuf:"varint,2,opt,name=instance" json:"instance,omitempty"`
	Ok            bool   `protobuf:"varint,3,opt,name=ok" json:"ok,omitempty"`
	Ballot        uint64 `protobuf:"varint,4,opt,name=ballot" json:"ballot,omitempty"`
	Seq           uint64 `protobuf:"varint,5,opt,name=seq" json:"seq,omitempty"`
	Deps          []byte `protobuf:"bytes,6,opt,name=deps,proto3" json:"deps,omitempty"`
	CommittedDeps []byte `protobuf:"bytes,7,opt,name=committedDeps,proto3" json:"committedDeps,omitempty"`
}

func (m *PreAcceptReply) Reset()                    { *m = PreAcceptReply{} }
func (m *PreAcceptReply) String() string            { return proto.CompactTextString(m) }
func (*PreAcceptReply) ProtoMessage()               {}
func (*PreAcceptReply) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *PreAcceptReply) GetReplica() int32 {
	if m != nil {
		return m.Replica
	}
	return 0
}

func (m *PreAcceptReply) GetInstance() int32 {
	if m != nil {
		return m.Instance
	}
	return 0
}

func (m *PreAcceptReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *PreAcceptReply) GetBallot() uint64 {
	if m != nil {
		return m.Ballot
	}
	return 0
}

func (m *PreAcceptReply) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *PreAcceptReply) GetDeps() []byte {
	if m != nil {
		return m.Deps
	}
	return nil
}

func (m *PreAcceptReply) GetCommittedDeps() []byte {
	if m != nil {
		return m.CommittedDeps
	}
	return nil
}

type AcceptRequest struct {
	LeaderId int32  `protobuf:"varint,1,opt,name=leaderId" json:"leaderId,omitempty"`
	Replica  int32  `protobuf:"varint,2,opt,name=replica" json:"replica,omitempty"`
	Instance int32  `protobuf:"varint,3,opt,name=instance" json:"instance,omitempty"`
	Ballot   uint64 `protobuf:"varint,4,opt,name=ballot" json:"ballot,omitempty"`
	Count    uint64 `protobuf:"varint,5,opt,name=Count" json:"Count,omitempty"`
	Seq      uint64 `protobuf:"varint,6,opt,name=seq" json:"seq,omitempty"`
	Deps     []byte `protobuf:"bytes,7,opt,name=deps,proto3" json:"deps,omitempty"`
}

func (m *AcceptRequest) Reset()                    { *m = AcceptRequest{} }
func (m *AcceptRequest) String() string            { return proto.CompactTextString(m) }
func (*AcceptRequest) ProtoMessage()               {}
func (*AcceptRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *AcceptRequest) GetLeaderId() int32 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

func (m *AcceptRequest) GetReplica() int32 {
	if m != nil {
		return m.Replica
	}
	return 0
}

func (m *AcceptRequest) GetInstance() int32 {
	if m != nil {
		return m.Instance
	}
	return 0
}

func (m *AcceptRequest) GetBallot() uint64 {
	if m != nil {
		return m.Ballot
	}
	return 0
}

func (m *AcceptRequest) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *AcceptRequest) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *AcceptRequest) GetDeps() []byte {
	if m != nil {
		return m.Deps
	}
	return nil
}

type AcceptReply struct {
	Replica  int32  `protobuf:"varint,1,opt,name=replica" json:"replica,omitempty"`
	Instance int32  `protobuf:"varint,2,opt,name=instance" json:"instance,omitempty"`
	Ok       bool   `protobuf:"varint,3,opt,name=ok" json:"ok,omitempty"`
	Ballot   uint64 `protobuf:"varint,4,opt,name=ballot" json:"ballot,omitempty"`
}

func (m *AcceptReply) Reset()                    { *m = AcceptReply{} }
func (m *AcceptReply) String() string            { return proto.CompactTextString(m) }
func (*AcceptReply) ProtoMessage()               {}
func (*AcceptReply) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *AcceptReply) GetReplica() int32 {
	if m != nil {
		return m.Replica
	}
	return 0
}

func (m *AcceptReply) GetInstance() int32 {
	if m != nil {
		return m.Instance
	}
	return 0
}

func (m *AcceptReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *AcceptReply) GetBallot() uint64 {
	if m != nil {
		return m.Ballot
	}
	return 0
}

type CommitRequest struct {
	LeaderId int32  `protobuf:"varint,1,opt,name=leaderId" json:"leaderId,omitempty"`
	Replica  int32  `protobuf:"varint,2,opt,name=replica" json:"replica,omitempty"`
	Instance int32  `protobuf:"varint,3,opt,name=instance" json:"instance,omitempty"`
	Name     string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Value    []byte `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	Seq      uint64 `protobuf:"varint,6,opt,name=seq" json:"seq,omitempty"`
	Deps     []byte `protobuf:"bytes,7,opt,name=deps,proto3" json:"deps,omitempty"`
}

func (m *CommitRequest) Reset()                    { *m = CommitRequest{} }
func (m *CommitRequest) String() string            { return proto.CompactTextString(m) }
func (*CommitRequest) ProtoMessage()               {}
func (*CommitRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *CommitRequest) GetLeaderId() int32 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

func (m *CommitRequest) GetReplica() int32 {
	if m != nil {
		return m.Replica
	}
	return 0
}

func (m *CommitRequest) GetInstance() int32 {
	if m != nil {
		return m.Instance
	}
	return 0
}

func (m *CommitRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CommitRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *CommitRequest) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CommitRequest) GetDeps() []byte {
	if m != nil {
		return m.Deps
	}
	return nil
}

type TryPreAcceptRequest struct {
	LeaderId int32  `protobuf:"varint,1,opt,name=leaderId" json:"leaderId,omitempty"`
	Replica  int32  `protobuf:"varint,2,opt,name=replica" json:"replica,omitempty"`
	Instance int32  `protobuf:"varint,3,opt,name=instance" json:"instance,omitempty"`
	Ballot   uint64 `protobuf:"varint,4,opt,name=ballot" json:"ballot,omitempty"`
	Name     string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Value    []byte `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	Seq      uint64 `protobuf:"varint,7,opt,name=seq" json:"seq,omitempty"`
	Deps     []byte `protobuf:"bytes,8,opt,name=deps,proto3" json:"deps,omitempty"`
}

func (m *TryPreAcceptRequest) Reset()                    { *m = TryPreAcceptRequest{} }
func (m *TryPreAcceptRequest) String() string            { return proto.CompactTextString(m) }
func (*TryPreAcceptRequest) ProtoMessage()               {}
func (*TryPreAcceptRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{7} }

func (m *TryPreAcceptRequest) GetLeaderId() int32 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

func (m *TryPreAcceptRequest) GetReplica() int32 {
	if m != nil {
		return m.Replica
	}
	return 0
}

func (m *TryPreAcceptRequest) GetInstance() int32 {
	if m != nil {
		return m.Instance
	}
	return 0
}

func (m *TryPreAcceptRequest) GetBallot() uint64 {
	if m != nil {
		return m.Ballot
	}
	return 0
}

func (m *TryPreAcceptRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TryPreAcceptRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *TryPreAcceptRequest) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *TryPreAcceptRequest) GetDeps() []byte {
	if m != nil {
		return m.Deps
	}
	return nil
}

type TryPreAcceptReply struct {
	AcceptorId       int32  `protobuf:"varint,1,opt,name=acceptorId" json:"acceptorId,omitempty"`
	Replica          int32  `protobuf:"varint,2,opt,name=replica" json:"replica,omitempty"`
	Instance         int32  `protobuf:"varint,3,opt,name=instance" json:"instance,omitempty"`
	Ok               bool   `protobuf:"varint,4,opt,name=ok" json:"ok,omitempty"`
	Ballot           uint64 `protobuf:"varint,5,opt,name=ballot" json:"ballot,omitempty"`
	ConflictReplica  int32  `protobuf:"varint,6,opt,name=conflictReplica" json:"conflictReplica,omitempty"`
	ConflictInstance int32  `protobuf:"varint,7,opt,name=conflictInstance" json:"conflictInstance,omitempty"`
	ConflictStatus   Status `protobuf:"varint,8,opt,name=conflictStatus,enum=pb.Status" json:"conflictStatus,omitempty"`
}

func (m *TryPreAcceptReply) Reset()                    { *m = TryPreAcceptReply{} }
func (m *TryPreAcceptReply) String() string            { return proto.CompactTextString(m) }
func (*TryPreAcceptReply) ProtoMessage()               {}
func (*TryPreAcceptReply) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{8} }

func (m *TryPreAcceptReply) GetAcceptorId() int32 {
	if m != nil {
		return m.AcceptorId
	}
	return 0
}

func (m *TryPreAcceptReply) GetReplica() int32 {
	if m != nil {
		return m.Replica
	}
	return 0
}

func (m *TryPreAcceptReply) GetInstance() int32 {
	if m != nil {
		return m.Instance
	}
	return 0
}

func (m *TryPreAcceptReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *TryPreAcceptReply) GetBallot() uint64 {
	if m != nil {
		return m.Ballot
	}
	return 0
}

func (m *TryPreAcceptReply) GetConflictReplica() int32 {
	if m != nil {
		return m.ConflictReplica
	}
	return 0
}

func (m *TryPreAcceptReply) GetConflictInstance() int32 {
	if m != nil {
		return m.ConflictInstance
	}
	return 0
}

func (m *TryPreAcceptReply) GetConflictStatus() Status {
	if m != nil {
		return m.ConflictStatus
	}
	return Status_NONE
}

func init() {
	proto.RegisterType((*PrepareRequest)(nil), "pb.PrepareRequest")
	proto.RegisterType((*PrepareReply)(nil), "pb.PrepareReply")
	proto.RegisterType((*PreAcceptRequest)(nil), "pb.PreAcceptRequest")
	proto.RegisterType((*PreAcceptReply)(nil), "pb.PreAcceptReply")
	proto.RegisterType((*AcceptRequest)(nil), "pb.AcceptRequest")
	proto.RegisterType((*AcceptReply)(nil), "pb.AcceptReply")
	proto.RegisterType((*CommitRequest)(nil), "pb.CommitRequest")
	proto.RegisterType((*TryPreAcceptRequest)(nil), "pb.TryPreAcceptRequest")
	proto.RegisterType((*TryPreAcceptReply)(nil), "pb.TryPreAcceptReply")
	proto.RegisterEnum("pb.Status", Status_name, Status_value)
}

func init() { proto.RegisterFile("epaxos.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 524 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x55, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x66, 0x1d, 0xff, 0x75, 0x9a, 0xb8, 0x66, 0xa8, 0xd0, 0x8a, 0x03, 0xb2, 0x2c, 0x0e, 0x56,
	0x0f, 0x39, 0x94, 0x27, 0xa8, 0x5c, 0x1f, 0x72, 0x68, 0x1b, 0x4c, 0x90, 0xb8, 0xa1, 0xb5, 0xb3,
	0x48, 0x51, 0x1c, 0xaf, 0x6b, 0x3b, 0x88, 0x72, 0xe2, 0x3d, 0x78, 0x0a, 0x0e, 0x5c, 0x78, 0x06,
	0x24, 0x5e, 0x09, 0x79, 0x9d, 0x4d, 0x9d, 0xc6, 0x08, 0x09, 0x89, 0x56, 0xe2, 0xb6, 0xdf, 0x37,
	0xb3, 0x99, 0xef, 0x9b, 0x99, 0xac, 0x61, 0xc8, 0x0b, 0xf6, 0x51, 0x54, 0xe3, 0xa2, 0x14, 0xb5,
	0x40, 0xad, 0x48, 0xfc, 0x4f, 0xe0, 0x4c, 0x4b, 0x5e, 0xb0, 0x92, 0xc7, 0xfc, 0x7a, 0xcd, 0xab,
	0x1a, 0x9f, 0x81, 0x9d, 0x71, 0x36, 0xe7, 0xe5, 0x64, 0x4e, 0x89, 0x47, 0x02, 0x23, 0xde, 0x62,
	0xa4, 0x60, 0x95, 0xbc, 0xc8, 0x16, 0x29, 0xa3, 0x9a, 0x0c, 0x29, 0xd8, 0xdc, 0x5a, 0xe4, 0x55,
	0xcd, 0xf2, 0x94, 0xd3, 0x41, 0x7b, 0x4b, 0x61, 0x7c, 0x0a, 0x66, 0xc2, 0xb2, 0x4c, 0xd4, 0x54,
	0xf7, 0x48, 0xa0, 0xc7, 0x1b, 0xe4, 0x7f, 0xd6, 0x60, 0xb8, 0x2d, 0x5e, 0x64, 0x37, 0xf8, 0x1c,
	0x80, 0xa5, 0x29, 0x2f, 0x6a, 0x71, 0x5b, 0xbc, 0xc3, 0xfc, 0x65, 0x79, 0x07, 0x34, 0xb1, 0x94,
	0xa5, 0xed, 0x58, 0x13, 0xcb, 0x8e, 0x1c, 0xa3, 0x2b, 0x07, 0x7d, 0x30, 0xab, 0x9a, 0xd5, 0xeb,
	0x8a, 0x9a, 0x1e, 0x09, 0x9c, 0x53, 0x18, 0x17, 0xc9, 0xf8, 0xb5, 0x64, 0xe2, 0x4d, 0x04, 0x11,
	0xf4, 0x9c, 0xad, 0x38, 0xb5, 0x3c, 0x12, 0x1c, 0xc4, 0xf2, 0x8c, 0xc7, 0x60, 0x7c, 0x60, 0xd9,
	0x9a, 0x53, 0xdb, 0x23, 0xc1, 0x30, 0x6e, 0x01, 0xba, 0x30, 0xa8, 0xf8, 0x35, 0x3d, 0x90, 0x25,
	0x9a, 0x63, 0x73, 0x77, 0xce, 0x8b, 0x8a, 0x82, 0x4c, 0x93, 0x67, 0xff, 0x07, 0x01, 0x77, 0x5a,
	0xf2, 0x33, 0xe9, 0xf1, 0xde, 0x27, 0xb0, 0xb5, 0x63, 0xf4, 0xd9, 0x31, 0x7b, 0xec, 0x58, 0xfb,
	0x76, 0xec, 0x8e, 0x9d, 0xef, 0x44, 0xae, 0x93, 0xb2, 0xd3, 0xcc, 0xb4, 0x23, 0x98, 0xfc, 0x5e,
	0xb0, 0xd6, 0x3b, 0xb3, 0x41, 0xcf, 0xcc, 0x76, 0x0d, 0x6c, 0x64, 0x19, 0xfb, 0xb2, 0xcc, 0x5b,
	0x59, 0xf8, 0x02, 0x46, 0xa9, 0x58, 0xad, 0x16, 0x75, 0xcd, 0xe7, 0xe7, 0x4d, 0xd0, 0x92, 0xc1,
	0x5d, 0xd2, 0xff, 0x46, 0x60, 0xf4, 0x50, 0x83, 0x38, 0x06, 0x23, 0x14, 0xeb, 0x5c, 0xad, 0x64,
	0x0b, 0x94, 0x3b, 0x73, 0xdf, 0x9d, 0xd5, 0x69, 0xfa, 0x12, 0x0e, 0xef, 0xad, 0xe1, 0xfe, 0x57,
	0x02, 0xa3, 0x50, 0xb6, 0xed, 0xdf, 0x35, 0x49, 0x6d, 0xa5, 0xde, 0xb7, 0x95, 0x46, 0xcf, 0x56,
	0xfe, 0xa1, 0x41, 0x3f, 0x09, 0x3c, 0x99, 0x95, 0x37, 0xff, 0xd1, 0xff, 0xec, 0x8b, 0x06, 0x8f,
	0x77, 0x1d, 0x3d, 0xfc, 0xf3, 0x19, 0xc0, 0x51, 0x2a, 0xf2, 0xf7, 0xd9, 0x22, 0x95, 0x72, 0x9a,
	0x2a, 0xa6, 0xfc, 0xa9, 0xbb, 0x34, 0x9e, 0x80, 0xab, 0xa8, 0x89, 0xaa, 0x6a, 0xc9, 0xd4, 0x3d,
	0x1e, 0x4f, 0xc1, 0x51, 0x5c, 0xfb, 0x14, 0xcb, 0x3e, 0xec, 0x3e, 0xce, 0x77, 0x32, 0x4e, 0x12,
	0x30, 0xdb, 0x13, 0xda, 0xa0, 0x5f, 0x5e, 0x5d, 0x46, 0xee, 0x23, 0x3c, 0x82, 0xc3, 0x69, 0x1c,
	0x9d, 0x85, 0x61, 0x34, 0x9d, 0x45, 0xe7, 0x2e, 0x41, 0x04, 0xa7, 0x43, 0xbc, 0x8b, 0x5e, 0xb9,
	0x1a, 0x0e, 0xc1, 0xde, 0x66, 0x0c, 0x70, 0x04, 0x07, 0xe1, 0xd5, 0xc5, 0xc5, 0x64, 0xd6, 0x40,
	0xbd, 0x09, 0x46, 0x6f, 0xa3, 0xf0, 0x4d, 0x83, 0x8c, 0xc4, 0x94, 0x9f, 0xd0, 0x97, 0xbf, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x3e, 0x7c, 0x9c, 0x2c, 0x52, 0x07, 0x00, 0x00,
}
