// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Consensus service

type ConsensusClient interface {
	Propose(ctx context.Context, in *ProposeRequest, opts ...grpc.CallOption) (*ProposeReply, error)
	Dispatch(ctx context.Context, opts ...grpc.CallOption) (Consensus_DispatchClient, error)
}

type consensusClient struct {
	cc *grpc.ClientConn
}

func NewConsensusClient(cc *grpc.ClientConn) ConsensusClient {
	return &consensusClient{cc}
}

func (c *consensusClient) Propose(ctx context.Context, in *ProposeRequest, opts ...grpc.CallOption) (*ProposeReply, error) {
	out := new(ProposeReply)
	err := grpc.Invoke(ctx, "/pb.Consensus/Propose", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consensusClient) Dispatch(ctx context.Context, opts ...grpc.CallOption) (Consensus_DispatchClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Consensus_serviceDesc.Streams[0], c.cc, "/pb.Consensus/Dispatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &consensusDispatchClient{stream}
	return x, nil
}

type Consensus_DispatchClient interface {
	Send(*PeerRequest) error
	Recv() (*PeerReply, error)
	grpc.ClientStream
}

type consensusDispatchClient struct {
	grpc.ClientStream
}

func (x *consensusDispatchClient) Send(m *PeerRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *consensusDispatchClient) Recv() (*PeerReply, error) {
	m := new(PeerReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Consensus service

type ConsensusServer interface {
	Propose(context.Context, *ProposeRequest) (*ProposeReply, error)
	Dispatch(Consensus_DispatchServer) error
}

func RegisterConsensusServer(s *grpc.Server, srv ConsensusServer) {
	s.RegisterService(&_Consensus_serviceDesc, srv)
}

func _Consensus_Propose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsensusServer).Propose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Consensus/Propose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsensusServer).Propose(ctx, req.(*ProposeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consensus_Dispatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConsensusServer).Dispatch(&consensusDispatchServer{stream})
}

type Consensus_DispatchServer interface {
	Send(*PeerReply) error
	Recv() (*PeerRequest, error)
	grpc.ServerStream
}

type consensusDispatchServer struct {
	grpc.ServerStream
}

func (x *consensusDispatchServer) Send(m *PeerReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *consensusDispatchServer) Recv() (*PeerRequest, error) {
	m := new(PeerRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Consensus_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Consensus",
	HandlerType: (*ConsensusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Propose",
			Handler:    _Consensus_Propose_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Dispatch",
			Handler:       _Consensus_Dispatch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 147 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x92, 0xe2, 0x49,
	0xce, 0xc9, 0x4c, 0xcd, 0x2b, 0x81, 0x88, 0x48, 0xf1, 0xa5, 0xe6, 0x95, 0xa5, 0xe6, 0xe4, 0x17,
	0x40, 0x55, 0x18, 0x15, 0x70, 0x71, 0x3a, 0xe7, 0xe7, 0x15, 0xa7, 0xe6, 0x15, 0x97, 0x16, 0x0b,
	0x19, 0x72, 0xb1, 0x07, 0x14, 0xe5, 0x17, 0xe4, 0x17, 0xa7, 0x0a, 0x09, 0xe9, 0x15, 0x24, 0xe9,
	0x41, 0x39, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x52, 0x02, 0x28, 0x62, 0x05, 0x39, 0x95,
	0x4a, 0x0c, 0x42, 0x06, 0x5c, 0x1c, 0x2e, 0x99, 0xc5, 0x05, 0x89, 0x25, 0xc9, 0x19, 0x42, 0xfc,
	0x60, 0xf9, 0xd4, 0xd4, 0x22, 0x98, 0x06, 0x5e, 0x84, 0x00, 0x58, 0xb5, 0x06, 0xa3, 0x01, 0x63,
	0x12, 0x1b, 0xd8, 0x62, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4b, 0x04, 0x3d, 0xf4, 0xab,
	0x00, 0x00, 0x00,
}
